<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Social Notifications</title>
  <abstract>This specification defines an XMPP protocol extension for exchanging, storing and retrieving generic notification messages between users. It provides a user with a &quot;social inbox&quot; in which a user receives notifications from other users (e.g. a user activity) or directly from the user server (e.g. a relationship confirmation request). This extension is part of the OneSocialWeb suite of XMPP extensions. This extension overlaps with PubSub and PEP but differs in the access control framework used. It is our intention to work with respective editors and find ways to bring these together.</abstract>
  <number/>
  <status/>
  <type/>
  <sig/>
  <approver/>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XEP-0030</spec>
    <spec>XEP-0059</spec>
  </dependencies>
  <supersedes />
  <supersededby/>
  <shortname>NOT_YET_ASSIGNED</shortname>
  <author>
    <firstname>Laurent</firstname>
    <surname>Eschenauer</surname>
    <email>laurent.eschenauer@vodafone.com</email>
    <jid></jid>
  </author>
  <revision>
    <version>0.0.1</version>
    <date>2010-01-25</date>
    <initials>le</initials>
    <remark><p>First draft.</p></remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'>
  <section2 topic='Overview' anchor='intro-overview'>
    <p>The XMPP Extension defined in this document is part of a collection of XMPP extensions that forms the OneSocialWeb (OSW) protocol. The purpose of the OneSocialWeb protocol is to enable free, open, and decentralized social applications on the web. In particular, this protocol can be used to turn any XMPP server into a full fledged social network, participating in the OneSocialWeb federation. The suite of extension covers all the usual social networking use cases such as user profiles, relationships, activity streams and third party applications. In addition, it provides support for fine grained access control, realtime notification and collaboration.</p>
    <p>The Social notifications extension defined in this document addresses the requirement for sharing (usually in realtime) generic notification messages resulting from user activities across the social web. Since users are not expected to be always on-line, the notifications are stored in a user inbox, that can be later retrieved, searched, and filtered. A notification is a generic element consisting of a type attribute and a payload.</p>
    <p>This protocol fills similar needs as PubSub or PEP. It is however not possible to directly use these extensions since in our case not all notifications are sent to all subscribers. Instead, the privacy settings of a notification and other business rules will determine if someone should be sent a notification.</p>
  </section2>
</section1>

<section1 topic='Requirements' anchor='reqs'>
  <p>STRONGLY RECOMMENDED.</p>
</section1>

<section1 topic='Glossary' anchor='glossary'>
  <p>OPTIONAL.</p>
</section1>

<section1 topic='Publisher Use Cases' anchor='publisher'>
  <p>This section defines the use cases for and protocols to be used by any entity that wishes to push a notification to another user.</p>

  <section2 topic='Send a notification' anchor='publisher-send'>
    <p>An entity can send a notification to another user or server by sending a message stanza to the user bare JID, of type headline and containing a &lt;notification/&gt; element with both a &lt;type/&gt; and a &lt;payload/&gt; fields.</p>

    <p>In the following example, &lt;romeo@montague.lit&gt; has updated his status using his social networking client. Since &lt;juliet@capulet.lit&gt; is following Romeo (she has a following relationship with him), and since Romeo's update is visible to everyone, the montague server pushes a notification to Juliet:</p>

    <example caption='Server sends a new notification'><![CDATA[
<message from="romeo@montague.lit" type="headline" to="juliet@capulet.lit" >
  <notification xmlns="http://onesocialweb.org/spec/1.0/">
    <type>http://onesocialweb.org/spec/1.0/notification/activity</type>
    <payload>
      <entry xmlns="http://www.w3.org/2005/Atom"
             xmlns:activity="http://activitystrea.ms/spec/1.0/">
        <id>urn:uuid:684ae7b1-08ce-4895-9c5e-8cb56d760505</id>
        <published>2010-01-22T15:12:37.067Z</published>
        <title>Oh my love where are thou ?</title>
        <activity:actor>
          <email>romeo@montague.lit</email>
          <name>Romeoooo</name>
          <uri>romeo@montague.lit</uri>
        </actor>
        <activity:object>
          <id>urn:uuid:bd0747ae-5e02-426d-a7b2-2758cdd138a0</id>
          <content>Oh my love where are thou ?</content>
          <activity:object-type>http://onesocialweb.org/spec/1.0/object/status</activity:object-type>
        </activity:object>
        <activity:verb xmlns="http://activitystrea.ms/spec/1.0/">http://activitystrea.ms/schema/1.0/post</activity:verb>
      </entry>
   </payload>
  </notification>
</message>
]]>
    </example>

<p>Juliet's server intercepts the message, stores the notification in Juliet's inbox for future reading and, if Juliet is online, forwards the message to her. All items in the inbox are archived so that any client can retrieve them later.</p>

  </section2>
</section1>

<section1 topic='Reader Use Cases' anchor='reader'>
  <p>This section defines the use cases for and protocols to be used by any entity that wishes to query its notification inbox. In particular, an entity can paginate through the archived notifications, filter them, search them and delete them.</p>

  <section2 topic='Query Latest Notifications' anchor='reader-query'>

    <p>An entity can query the latest notifications in its inbox by sending an IQ-get to its server containing  a &lt;query/&gt; element. The server replies to this request with the latest notifications. The number of activities returned SHOULD be bounded (//TODO: Should we specify a limit?). If more notifications are available, the answer SHOULD comply with &xep0059;.</p>

    <p>As an example, we have the entity, &lt;hamlet@denmark.lit&gt; opening its social networking client. The client immediately fetches the inbox of Hamlet so that he can see all the latest activities of his friends. The client sends the following request:</p>

    <example caption='User Request Latest Notifications'><![CDATA[
<iq type='get'
    from='hamlet@denmark.lit/snsclient'
    to='denmark.lit'
    id='osw2'>
  <query xmlns="http://onesocialweb.org/protocol/0.1/notifications#query"></query>
</iq>
    ]]></example>

    <p>To which Hamlet's server replies with the latest notifications in Hamlet's inbox. There are only two items in Hamlet's inbox: a status update by a friend and a relationship request by Othello.</p>

    <example caption='Service Reply With Latest Notifications'><![CDATA[
<iq type="result" 
    from='denmark.lit'
    to='hamlet@denmark.lit/snsclient'
    id='osw2'>
  <query xmlns="http://onesocialweb.org/protocol/0.1/notifications#query">
    <notification xmlns="http://onesocialweb.org/spec/1.0/">
      <type>http://onesocialweb.org/spec/1.0/notification/activity</type>
      <payload>
        <entry xmlns="http://www.w3.org/2005/Atom"> 
          [ ... ENTRY DETAILS ... ]
        </entry>
      </payload>
    </notification>
    <notification xmlns="http://onesocialweb.org/spec/1.0/">
      <type>http://onesocialweb.org/spec/1.0/notification/relationship</type>
      <payload>
        <relationship xmlns="http://onesocialweb.org/spec/1.0/">
        <id>urn:uuid:0bfb71a4-d8fd-4410-b119-199c3596f296</id>
        <published>2010-01-13T12:40:51.292Z</published>
        <from>othello@venice.lit</from>
        <to>hamlet@denmark.lit</to>
        <nature>http://onesocialweb.org/spec/1.0/relationship/nature/colleague</nature>
        <message>Shall we use this network to exchange our ideas ?</message>
      </payload>
    </relationship>
  </query>
</iq>
    ]]></example>
  </section2>

  <section2 topic='Paginate Through Notifications' anchor='reader-paginate'>
    <p>[TODO: Simple example using result set management]</p>
  </section2>

  <section2 topic='Filter Notifications' anchor='reader-filter'>
    <p>[TODO: How far do we want to go ? Basic filtering by type ? Filtering inside payloads ? Allow for more specific rules supporting comparators etc... almost replicating a full blown SQL ? We need to strike a balance between filtering on server and in the client.]</p>
  </section2>

  <section2 topic='Search Notifications' anchor='reader-search'>
    <p>[TODO: Similar and linked to previous item: how far to go ?]</p>
  </section2>

  <section2 topic='Combination of Search, Filter and Paginate' anchor='reader-combo'>
    <p>[TODO: Depends on decision for previous points</p>
  </section2>

</section1>

<section1 topic='Subscriber Use Cases' anchor='subscriber'>
  <p>A notification may be sent to a user for two reasons:</p>
  <ul>
    <li>a server consider the notification relevant for the user (e.g. a server sending a new relationship notification, or a user being referd to in a activity (e.g. @reply in twitter)</li>
    <li>the user has subscribed to received these notifications, for example indicating that he wants to &quot;follow&quot; another user</li>
  </ul>
  <p>This extension does not describe a protocol for subscribing to another user notifications. Instead, this is done by setting a &quot;following&quot; relationship with a user. Once that relationship is in place, the other user will push notification when required to the subscriber.</p>
</section1>

<section1 topic='Business Rules' anchor='rules'>
  <p>OPTIONAL.</p>
</section1>
<section1 topic='Implementation Notes' anchor='impl'>
  <p>OPTIONAL.</p>
</section1>
<section1 topic='Accessibility Considerations' anchor='access'>
  <p>OPTIONAL.</p>
</section1>
<section1 topic='Internationalization Considerations' anchor='i18n'>
  <p>OPTIONAL.</p>
</section1>
<section1 topic='Security Considerations' anchor='security'>
  <p>REQUIRED.</p>
</section1>
<section1 topic='IANA Considerations' anchor='iana'>
  <p>REQUIRED.</p>
</section1>
<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <p>REQUIRED.</p>
</section1>
<section1 topic='XML Schema' anchor='schema'>
  <p>REQUIRED for protocol specifications.</p>
</section1>
</xep>
